import numpy as np
from math import pi

def my_taskSpace_ctl(ctl, dt, q, qd, gravity, coriolis, M, J, cart, desCart):

    gamma = 0.6
    dFact = 1e-6
    KP = np.diag([60, 30])
    KD = np.diag([10, 6])



    if ctl == 'JacTrans':
        qd_des = gamma * J.transpose() * (desCart - cart)
        error = q + qd_des * dt - q
        errord = qd_des - qd
        u = M * np.vstack(np.hstack([KP,KD])) * np.vstack([error,errord]) + coriolis + gravity

    elif ctl == 'JacPseudo':
        qd_des = gamma * J.transpose() * np.linalg.pinv(J * J.transpose()) * (desCart - cart)
        error = q + qd_des * dt - q
        errord = qd_des - qd
        u = M * np.vstack(np.hstack([KP,KD])) * np.vstack([error,errord]) + coriolis + gravity

    elif ctl == 'JacDPseudo':
        qd_des = J.transpose() * np.linalg.pinv(J * J.transpose() + dFact * np.eye(2)) * (desCart - cart)
        error = q + qd_des * dt - q
        errord = qd_des - qd
        u = M * np.vstack(np.hstack([KP,KD])) * np.vstack([error,errord]) + coriolis + gravity

    elif ctl == 'JacNullSpace':
        qd_des = J.transpose() * np.linalg.pinv(J * J.transpose() + dFact * np.eye(2)) * (desCart - cart) + \
                 (np.eye(2) - J.transpose() * np.linalg.pinv(J * J.transpose() + dFact * np.eye(2))) \
                 * 60 * (np.mat([0, pi]).transpose() - q)
        error = q + qd_des * dt - q
        errord = qd_des - qd
        u = M * np.vstack(np.hstack([KP,KD])) * np.vstack([error,errord]) + coriolis + gravity

    return u
